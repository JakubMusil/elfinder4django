import UserDictimport jsonclass ResponseBuilder(UserDict.IterableUserDict, object):	def __init__(self, *args, **kwargs):		super(ResponseBuilder, self).__init__()		self.mimetype = 'application/json'		self.json_result = ''		self.other_result = ''		self.headers = None		print '' # u'ITHIIIIIIINNNNNKKKKK ITSSSS  HHEERRERRERR   >>>>>^^^^^'		#self.setdefault('other', '')		print '' # u'ITHIIIIIIINNNNNKKKKK ITSSSS  HHEERRERRERR   >>>>>^^^^^'	def build(self):		print '' # u'INSIDE BUILDER'		if self.mimetype == 'application/json':			self.json_result = json.dumps(dict(self))			def add_command_result(self, command):		print '' # u'^^^^^^^^^^^^^^^^^^^^^^^COMMAND ||||||RESULT||||||| ADDED !!!!!+++++++++++++++++++++++++++++++++'		result = command.get_result()		self.mimetype = command.get_result_type()		self.headers = command.get_headers()		if type(result) in (type([]), type(())):			for r in result:				#print '' # ur'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\||||||||||||||||||\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\BUILDING ___________ %s'%r 				self.update(r)		elif type(result) == type({}):			self.update(result)		else:			self.other_result = result			self.json_result = result		#print '' # u'HI, THIS IS THE FINAL RESULT ::::: %s '%self.__str__()	def add_command_error(self, error):		print '' # u'ADDINGGGG COMMAND ERRROR ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^'		self.update({'error': error})			def get_result(self):		if self.other_result:			print 'OTHERRESULT""""""""""""'			return self.other_result		print 'OTHERRESULT 11""""""""""""'		return self.json_result