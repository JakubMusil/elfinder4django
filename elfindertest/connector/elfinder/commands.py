from connector.elfinder.exceptions import ParameterErrorfrom connector.settings import ELFINDER_ROOTclass BaseCommand(object):	'''The Base Command Abstract Class'''	def __init__(self, **kwargs):		self.success = False		self.errors = []		self.req = request	def execute(self):		raise NotImplementedError, 'You Must Implement execute command'	def validate_params(self):		raise NotImplementedError	def get_url(self, path):		raise NotImplementedError	def get_mime(self, path):		raise NotImplementedError	def find_path(self, fhash):		raise NotImplementedError	def cwd(self, path):		d = {}		time = 'Today'		try:			time = datetime.fromtimestamp(os.stat(path).st_mtime).strftime("%d %b %Y %H:%M")		except:			pass		d['name'] = os.path.basename(path)		d['hash'] = hash(path)		d['rel'] = 'Home'		d['date'] = time		d['mime'] = 'directory'		d['size'] = dir_size(path)		d['read'] = True		d['write'] = True		d['rm'] = False		return d	def get_size(self, path):		total_size = 0		if True:			for dirpath, dirnames, filenames in os.walk(path):				for f in filenames:					fp = os.path.join(dirpath, f)					if os.path.exists(fp):						total_size += os.stat(fp).st_size		else:			total_size = os.lstat(path).st_size		return total_size	def hash(self, path):		m = hashlib.md5()		m.update(path)		return str(m.hexdigest())class OpenCommand(BaseCommand):	''' open directory'''	def __init__(self, **kwargs):		super(OpenCommand, self).__init__(**kwargs)		self.target = None		self.init = None		self.tree = None		self.can_execute = False		self.result = {}	def validate_params(self):		if 'traget' in self.req.params and self.req.params.get('target', ''):			self.target = self.req.params.get('target', '')			self.can_execute = True		elif 'init' in self.req.params and self.req.params.get('init', ''):			self.init = True			self.can_execute = True		else:			raise ParameterError, u'Open Command does not have required parameters'				def execute(self):		if self.init:			self.execute_init()		else:			self.execute_open()		def execute_init(self):		pass			def execute_open(self):		pass	class FileCommand(BaseCommand):	''' output file contents to the browser (download) '''	pass	class ParentsCommand(BaseCommand):	''' add to return child directories (not a command but option? todo) '''	pass	class TreeCommand(BaseCommand):	''' add to return parent directories (not a command but option? todo) '''	pass	class LsCommand(BaseCommand):	''' list files in directory (not a command but option? todo) '''	pass	class TmbCommand(BaseCommand):	''' create thumbnails for selected files '''	pass	class SizeCommand(BaseCommand):	''' return size for selected files '''	pass	class DimCommand(BaseCommand):	''' return image dimensions '''	pass	class MkdirCommand(BaseCommand):	''' create directory '''	pass	class MkfileCommand(BaseCommand):	''' create text file '''	pass	class RmCommand(BaseCommand):	''' delete file '''	pass	class RenameCommand(BaseCommand):	''' rename file '''	pass	class DuplicateCommand(BaseCommand):	''' create copy of file '''	pass	class PasteCommand(BaseCommand):	''' copy or move files '''	passclass UploadCommand(BaseCommand):	''' upload file '''	pass	class GetCommand(BaseCommand):	''' return text file contents '''	pass	class PutCommand(BaseCommand):	''' save text file '''	pass	class ArchiveCommand(BaseCommand):	''' create archive '''	pass	class ExtractCommand(BaseCommand):	''' extract archive '''	pass	class SearchCommand(BaseCommand):	''' search for files '''	pass	class InfoCommand(BaseCommand):	''' return info for selected files '''	pass	COMMANDS_MAP = {	'open' : UploadCommand,	'file' : UploadCommand,	'tree' : TreeCommand,	'parents' : ParentsCommand,	'ls' : LsCommand,	'tmb' : TmbCommand,	'size' : SizeCommand,	'dim' : DimCommand,	'mkdir' : MkdirCommand,	'mkfile' : MkfileCommand,	'rm' : RmCommand,	'rename' : RenameCommand,	'duplicate' : DuplicateCommand,	'paste' : PasteCommand,	'upload' : UploadCommand,	'get' : GetCommand,	'put' : PutCommand,	'archive' : ArchiveCommand,	'extract' : ExtractCommand,	'search' : SearchCommand,	'info' : InfoCommand,}